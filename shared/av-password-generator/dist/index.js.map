{"version":3,"sources":["../src/index.ts","../src/utils/PasswordGenerator.ts"],"sourcesContent":["export * from './utils/PasswordGenerator';\nexport * from './types/PasswordSettings';","import { PasswordSettings } from '../types/PasswordSettings';\n\n/**\n * Generate a random password.\n */\nexport class PasswordGenerator {\n  private readonly lowercaseChars = 'abcdefghijklmnopqrstuvwxyz';\n  private readonly uppercaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  private readonly numberChars = '0123456789';\n  private readonly specialChars = '!@#$%^&*()_+-=[]{}|;:,.<>?';\n  private readonly ambiguousChars = 'Il1O0';\n\n  private length: number = 18;\n  private useLowercase: boolean = true;\n  private useUppercase: boolean = true;\n  private useNumbers: boolean = true;\n  private useSpecial: boolean = true;\n  private useNonAmbiguous: boolean = false;\n\n  /**\n   * Create a new instance of PasswordGenerator.\n   * @param settings Optional password settings to initialize with.\n   */\n  public constructor(settings?: PasswordSettings) {\n    if (settings) {\n      this.applySettings(settings);\n    }\n  }\n\n  /**\n   * Apply password settings to this generator.\n   */\n  public applySettings(settings: PasswordSettings): this {\n    this.length = settings.Length;\n    this.useLowercase = settings.UseLowercase;\n    this.useUppercase = settings.UseUppercase;\n    this.useNumbers = settings.UseNumbers;\n    this.useSpecial = settings.UseSpecialChars;\n    this.useNonAmbiguous = settings.UseNonAmbiguousChars;\n    return this;\n  }\n\n  /**\n   * Set the length of the password.\n   */\n  public setLength(length: number): this {\n    this.length = length;\n    return this;\n  }\n\n  /**\n   * Set if lowercase letters should be used.\n   */\n  public useLowercaseLetters(use: boolean): this {\n    this.useLowercase = use;\n    return this;\n  }\n\n  /**\n   * Set if uppercase letters should be used.\n   */\n  public useUppercaseLetters(use: boolean): this {\n    this.useUppercase = use;\n    return this;\n  }\n\n  /**\n   * Set if numeric characters should be used.\n   */\n  public useNumericCharacters(use: boolean): this {\n    this.useNumbers = use;\n    return this;\n  }\n\n  /**\n   * Set if special characters should be used.\n   */\n  public useSpecialCharacters(use: boolean): this {\n    this.useSpecial = use;\n    return this;\n  }\n\n  /**\n   * Set if only non-ambiguous characters should be used.\n   */\n  public useNonAmbiguousCharacters(use: boolean): this {\n    this.useNonAmbiguous = use;\n    return this;\n  }\n\n  /**\n   * Get a random index from the crypto module.\n   */\n  private getUnbiasedRandomIndex(max: number): number {\n    // Calculate the largest multiple of max that fits within Uint32.\n    const limit = Math.floor((2 ** 32) / max) * max;\n\n    while (true) {\n      const array = new Uint32Array(1);\n      crypto.getRandomValues(array);\n      const value = array[0];\n\n      // Reject values that would introduce bias.\n      if (value < limit) {\n        return value % max;\n      }\n    }\n  }\n\n  /**\n   * Generate a random password.\n   */\n  public generateRandomPassword(): string {\n    // Build the character set based on settings\n    const chars = this.buildCharacterSet();\n\n    // Generate initial password.\n    let password = this.generateInitialPassword(chars);\n\n    // Ensure a character from each set is present as some websites require this.\n    password = this.ensureRequirements(password);\n\n    return password;\n  }\n\n  /**\n   * Build character set based on selected options.\n   */\n  private buildCharacterSet(): string {\n    let chars = '';\n\n    if (this.useLowercase) {\n      chars += this.lowercaseChars;\n    }\n\n    if (this.useUppercase) {\n      chars += this.uppercaseChars;\n    }\n\n    if (this.useNumbers) {\n      chars += this.numberChars;\n    }\n\n    if (this.useSpecial) {\n      chars += this.specialChars;\n    }\n\n    // Ensure at least one character set is selected, otherwise default to lowercase.\n    if (chars.length === 0) {\n      chars = this.lowercaseChars;\n    }\n\n    // Remove ambiguous characters if needed.\n    if (this.useNonAmbiguous) {\n      chars = this.removeAmbiguousCharacters(chars);\n    }\n\n    return chars;\n  }\n\n  /**\n   * Remove ambiguous characters from a character set.\n   */\n  private removeAmbiguousCharacters(chars: string): string {\n    for (const ambChar of this.ambiguousChars) {\n      chars = chars.replace(ambChar, '');\n    }\n    return chars;\n  }\n\n  /**\n   * Generate initial random password.\n   */\n  private generateInitialPassword(chars: string): string {\n    let password = '';\n    for (let i = 0; i < this.length; i++) {\n      password += chars[this.getUnbiasedRandomIndex(chars.length)];\n    }\n    return password;\n  }\n\n  /**\n   * Ensure the generated password meets all specified requirements.\n   */\n  private ensureRequirements(password: string): string {\n    if (this.useLowercase && !/[a-z]/.exec(password)) {\n      password = this.addCharacterFromSet(\n        password,\n        this.getSafeCharacterSet(this.lowercaseChars, true)\n      );\n    }\n\n    if (this.useUppercase && !/[A-Z]/.exec(password)) {\n      password = this.addCharacterFromSet(\n        password,\n        this.getSafeCharacterSet(this.uppercaseChars, true)\n      );\n    }\n\n    if (this.useNumbers && !/\\d/.exec(password)) {\n      password = this.addCharacterFromSet(\n        password,\n        this.getSafeCharacterSet(this.numberChars, false)\n      );\n    }\n\n    if (this.useSpecial && !/[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?]/.exec(password)) {\n      password = this.addCharacterFromSet(\n        password,\n        this.specialChars\n      );\n    }\n\n    return password;\n  }\n\n  /**\n   * Get a character set with ambiguous characters removed if needed.\n   */\n  private getSafeCharacterSet(charSet: string, isAlpha: boolean): string {\n    // If we're not using non-ambiguous characters, just return the original set.\n    if (!this.useNonAmbiguous) {\n      return charSet;\n    }\n\n    let safeSet = charSet;\n    for (const ambChar of this.ambiguousChars) {\n      // For numeric sets, only process numeric ambiguous characters\n      if (!isAlpha && !/\\d/.test(ambChar)) {\n        continue;\n      }\n\n      let charToRemove = ambChar;\n\n      // Handle case conversion for alphabetic characters.\n      if (isAlpha) {\n        if (charSet === this.lowercaseChars) {\n          charToRemove = ambChar.toLowerCase();\n        } else {\n          charToRemove = ambChar.toUpperCase();\n        }\n      }\n\n      safeSet = safeSet.replace(charToRemove, '');\n    }\n\n    return safeSet;\n  }\n\n  /**\n   * Add a character from the given set at a random position in the password.\n   */\n  private addCharacterFromSet(password: string, charSet: string): string {\n    const pos = this.getUnbiasedRandomIndex(this.length);\n    const char = charSet[this.getUnbiasedRandomIndex(charSet.length)];\n\n    return password.substring(0, pos) + char + password.substring(pos + 1);\n  }\n}\n"],"mappings":"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","names":[]}