@page "/account/manage/ResetAuthenticator"

@using Microsoft.AspNetCore.Identity

@inject UserManager<AdminUser> UserManager
@inject SignInManager<AdminUser> SignInManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger

<PageTitleLayout>Reset authenticator key</PageTitleLayout>

<StatusMessage/>
<h3>Reset authenticator key</h3>
<div class="alert alert-warning" role="alert">
    <p>
        <span class="glyphicon glyphicon-warning-sign"></span>
        <strong>If you reset your authenticator key your authenticator app will not work until you reconfigure it.</strong>
    </p>
    <p>
        This process disables 2FA until you verify your authenticator app.
        If you do not complete your authenticator app configuration you may lose access to your account.
    </p>
</div>
<div>
    <form @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
        <AntiforgeryToken/>
        <button class="btn btn-danger" type="submit">Reset authenticator key</button>
    </form>
</div>

@code {
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    private async Task OnSubmitAsync()
    {
        await UserManager.SetTwoFactorEnabledAsync(UserService.User(), false);
        await UserManager.ResetAuthenticatorKeyAsync(UserService.User());
        var userId = await UserManager.GetUserIdAsync(UserService.User());
        Logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", userId);

        await SignInManager.RefreshSignInAsync(UserService.User());

        RedirectManager.RedirectToWithStatus(
            "account/manage/EnableAuthenticator",
            "Your authenticator app key has been reset, you will need to configure your authenticator app using the new key.",
            HttpContext);
    }

}
