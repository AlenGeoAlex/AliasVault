@page "/account/manage"
@using System.ComponentModel.DataAnnotations
@using AliasVault.Admin2.Services
@using Microsoft.AspNetCore.Identity

@inject UserManager<AdminUser> UserManager
@inject SignInManager<AdminUser> SignInManager
@inject IdentityRedirectManager RedirectManager
@inject UserService UserService

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>

<div class="flex flex-wrap -mx-3">
    <div class="w-full md:w-1/2 px-3">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-red-500 mb-4" role="alert"/>
            <div class="mb-4">
                <label for="username" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
                <input type="text" value="@username" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-gray-100 cursor-not-allowed" placeholder="Please choose your username." disabled/>
            </div>
            <div class="mb-4">
                <label for="phone-number" class="block text-sm font-medium text-gray-700 mb-1">Phone number</label>
                <InputText @bind-Value="Input.PhoneNumber" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" placeholder="Please enter your phone number."/>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-red-500 text-sm mt-1"/>
            </div>
            <button type="submit" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-md transition duration-150 ease-in-out">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private string? username;
    private string? phoneNumber;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        username = await UserManager.GetUserNameAsync(UserService.User());
        phoneNumber = await UserManager.GetPhoneNumberAsync(UserService.User());

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(UserService.User(), Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                // TODO: show error that phone number could not be set, use proper form validation?
                GlobalNotificationService.AddErrorMessage("Phone number could not be set", true);
            }
        }

        // await SignInManager.RefreshSignInAsync(UserService.User());
        GlobalNotificationService.AddSuccessMessage("Your profile has been updated", true);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }

}
