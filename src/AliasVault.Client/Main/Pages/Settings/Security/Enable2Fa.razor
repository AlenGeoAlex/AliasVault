@page "/settings/security/enable-2fa"
@using AliasVault.Client.Main.Pages.Settings.Security.Components
@inherits MainBase
@inject HttpClient Http

<LayoutPageTitle>Enable two-factor authentication</LayoutPageTitle>

<div class="grid grid-cols-1 px-4 pt-6 xl:grid-cols-3 xl:gap-4 dark:bg-gray-900">
    <div class="mb-4 col-span-full xl:mb-2">
        <Breadcrumb BreadcrumbItems="BreadcrumbItems"/>
        <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">Enable two-factor authentication</h1>
        <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">Enable two-factor authentication to increase the security of your vaults.</p>
    </div>
</div>

@if (IsLoading)
{
    <LoadingIndicator />
}
else if (RecoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="RecoveryCodes.ToArray()"/>
}
else
{
    <div class="p-4 mb-4  mx-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
        <div class="space-y-6">
            <div id="authenticator-uri" data-url="@QrCodeUrl" class="flex justify-center">
                <!-- QR code will be rendered here -->
            </div>

            <p class="text-sm text-gray-600 text-center">
                Scan this QR code with your authenticator app or enter the following secret manually:
            </p>
            <div class="text-lg font-mono text-center bg-gray-100 p-2 rounded" id="authenticator-secret">@Secret</div>

            <EditForm Model="@VerifyModel" OnValidSubmit="@VerifySetup" class="space-y-4">
                <div>
                    <InputText id="verificationCode" @bind-Value="VerifyModel.Code"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                               placeholder="Enter verification code"/>
                </div>
                <button type="submit"
                        class="w-full bg-primary-500 text-white py-2 px-4 rounded-md hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition duration-150 ease-in-out">
                    Verify and Enable
                </button>
            </EditForm>
        </div>
    </div>
}

@code {
    private string QrCodeUrl { get; set; } = string.Empty;
    private string Secret { get; set; } = string.Empty;
    private VerificationModel VerifyModel = new();
    private bool IsLoading { get; set; } = true;
    private List<string>? RecoveryCodes { get; set; }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = "Security settings", Url = "/settings/security" });
        BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = "Enable two-factor authentication" });
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        // Check on server if 2FA is enabled
        if (firstRender)
        {
            // Get the QR code and secret for the authenticator app.
            var response = await Http.PostAsync("api/v1/Auth/enable-2fa", null);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TotpSetupResult>();

                if (result != null)
                {
                    QrCodeUrl = result.QrCodeUrl;

                    // Make secret more readable by adding spaces every 4 characters
                    Secret = string.Join(" ", Enumerable.Range(0, result.Secret.Length / 4)
                        .Select(i => result.Secret.Substring(i * 4, 4))).ToLower();

                    IsLoading = false;
                    StateHasChanged();
                    JsInteropService.GenerateQrCode("authenticator-uri");
                }
            }

            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task VerifySetup()
    {
        var response = await Http.PostAsJsonAsync("api/v1/Auth/verify-2fa", VerifyModel.Code);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<TotpVerifyResult>();

            if (result != null)
            {
                GlobalNotificationService.AddSuccessMessage("Two-factor authentication is now successfully enabled. On your " +
                                                            "next login you will need to enter your 2FA code.", true);

                // Show recovery codes.
                RecoveryCodes = result.RecoveryCodes;
                IsLoading = false;
                StateHasChanged();
                return;
            }
        }

        GlobalNotificationService.AddErrorMessage("Failed to enable two-factor authentication.", true);
        StateHasChanged();
    }

    private class TotpSetupResult
    {
        public string Secret { get; set; } = string.Empty;
        public string QrCodeUrl { get; set; } = string.Empty;
    }

    private class TotpVerifyResult
    {
        public List<string> RecoveryCodes { get; set; } = new();
    }

    private class VerificationModel
    {
        public string Code { get; set; } = string.Empty;
    }
}
