@inherits MainBase

<div class="p-4 mb-4 mx-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
    <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Encryption key persist</h3>

    @if (IsLoading)
    {
        <LoadingIndicator />
    }
    else
    {
        if (IsWebAuthnEnabled)
        {
            <div class="mb-3 text-sm text-gray-600 dark:text-gray-400">The encryption key is persisted through WebAuthn. This means that when you reload the AliasVault page or tab, you can login with your face, fingerprint or built-in browser security keys.
                If you with to disable WebAuthn, you can do so with the button below.</div>
            <Button Color="danger" OnClick="DisableWebAuthn">Disable WebAuthn</Button>
        }
        else
        {
            <div class="mb-3 text-sm text-gray-600 dark:text-gray-400">By default the encryption key to unlock your vault is NOT persisted during the browser session. This means that when you reload the AliasVault page or tab, you will be prompted to enter your master password again.
                Alternatively, you can choose to persist the encryption key in the browser's local storage via WebAuthn. This will allow you, after logging in for the first time, to subsequently unlock your vault with your face, fingerprint or built-in browser security keys.</div>
            <Button Color="success" OnClick="EnableWebAuthn">Enable WebAuthn</Button>
        }
    }
</div>

@code {
    /// <summary>
    /// Event callback that is invoked when the Two-Factor Authentication status changes.
    /// </summary>
    [Parameter]
    public EventCallback OnStatusChanged { get; set; }

    private bool IsLoading { get; set; } = true;

    private bool IsWebAuthnEnabled { get; set; }

    /// <summary>
    /// Loads the Two-Factor Authentication status from the server.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    public async Task LoadData()
    {
        IsLoading = true;
        StateHasChanged();

        IsWebAuthnEnabled = await AuthService.IsWebAuthnEnabledAsync();

        IsLoading = false;
        StateHasChanged();
    }

    /// <summary>
    /// Enables WebAuthn.
    /// </summary>
    public async Task EnableWebAuthn()
    {
        var webauthCredentialDerivedKey = await JsInteropService.GetOrCreateWebAuthnCredentialDerivedKey(await GetUsernameAsync());

        Console.WriteLine($"webauthCredentialDerivedKey: {webauthCredentialDerivedKey}");
        Console.WriteLine($"webauthCredentialDerivedKey.CredentialId: {webauthCredentialDerivedKey.CredentialId}");
        Console.WriteLine($"webauthCredentialDerivedKey.DerivedKey: {webauthCredentialDerivedKey.DerivedKey}");

        // Set local storage var to indicate that WebAuthn is enabled and we should try to use it to unlock the vault.
        await AuthService.SetWebAuthnEnabledAsync(true, webauthCredentialDerivedKey.DerivedKey, webauthCredentialDerivedKey.CredentialId);

        await LoadData();
    }

    /// <summary>
    /// Disables WebAuthn.
    /// </summary>
    public async Task DisableWebAuthn()
    {
        // Set local storage var to indicate that WebAuthn is disabled and we should not try to use it to unlock the vault.
        await AuthService.SetWebAuthnEnabledAsync(false, string.Empty, string.Empty);

        await LoadData();
    }
}
