@page "/settings/security"
@using AliasVault.Client.Main.Pages.Settings.Security.Components
@inherits MainBase

<LayoutPageTitle>Security settings</LayoutPageTitle>

<div class="grid grid-cols-1 px-4 pt-6 xl:grid-cols-3 xl:gap-4 dark:bg-gray-900">
    <div class="mb-4 col-span-full xl:mb-2">
        <Breadcrumb BreadcrumbItems="BreadcrumbItems"/>
        <div class="flex items-center justify-between">
            <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">Security settings</h1>
            <RefreshButton OnRefresh="LoadData" ButtonText="Refresh" />
        </div>
        <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">Configure security settings.</p>
    </div>
</div>

<TwoFactorAuthenticationSection @ref="TwoFactorSection" OnStatusChanged="LoadData" />
<ActiveSessionsSection @ref="SessionsSection" OnSessionsChanged="LoadData" />

@code {
    private TwoFactorAuthenticationSection? TwoFactorSection;
    private ActiveSessionsSection? SessionsSection;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = "Security settings" });
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await LoadData();
        }
    }

    /// <summary>
    /// Loads data for both the Two-Factor Authentication and Active Sessions sections concurrently.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task LoadData()
    {
        await Task.WhenAll(
            TwoFactorSection!.LoadData(),
            SessionsSection!.LoadData()
        );
    }
}
