@page "/settings/totp"
@inherits MainBase
@inject HttpClient Http

<div class="max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md">
    <h3 class="text-2xl font-bold text-gray-800 mb-6">Set Up Two-Factor Authentication</h3>

    @if (!string.IsNullOrEmpty(QrCodeUrl))
    {
    <div class="space-y-6">
        <div id="authenticator-uri" data-url="@QrCodeUrl" class="flex justify-center">
            <!-- QR code will be rendered here -->
        </div>

        <p class="text-sm text-gray-600 text-center">
            Scan this QR code with your authenticator app or enter the following secret manually:
        </p>
        <p class="text-lg font-mono text-center bg-gray-100 p-2 rounded">@Secret</p>

        <EditForm Model="@VerifyModel" OnValidSubmit="@VerifySetup" class="space-y-4">
            <div>
                <InputText id="verificationCode" @bind-Value="VerifyModel.Code"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                           placeholder="Enter verification code" />
            </div>
            <button type="submit"
                    class="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition duration-150 ease-in-out">
                Verify and Enable
            </button>
        </EditForm>
    </div>
    }
    else
    {
    <button @onclick="EnableTwoFactor"
            class="w-full bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition duration-150 ease-in-out">
        Enable Two-Factor Authentication
    </button>
    }
</div>

@code {
    private string QrCodeUrl { get; set; } = string.Empty;
    private string Secret { get; set; } = string.Empty;
    private VerificationModel VerifyModel = new();

    private async Task EnableTwoFactor()
    {
        var response = await Http.PostAsync("api/v1/Auth/enable-2fa", null);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<TotpSetupResult>();

            if (result != null)
            {
                QrCodeUrl = result.QrCodeUrl;
                Secret = result.Secret;
                StateHasChanged();
                JsInteropService.GenerateQrCode("authenticator-uri");
            }
        }
    }

    private async Task VerifySetup()
    {
        var response = await Http.PostAsJsonAsync("api/v1/Auth/verify-2fa", VerifyModel.Code);
        if (response.IsSuccessStatusCode)
        {
            // TOTP setup successful
            // You might want to navigate the user or show a success message
            GlobalNotificationService.AddSuccessMessage("Two-factor authentication is now successfully enabled. On your " +
                                                        "next login you will need to enter your 2FA code.");
            NavigationManager.NavigateTo("/credentials");
        }
        else
        {
            // Handle error
        }
    }

    private class TotpSetupResult
    {
        public string Secret { get; set; } = string.Empty;
        public string QrCodeUrl { get; set; } = string.Empty;
    }

    private class VerificationModel
    {
        public string Code { get; set; } = string.Empty;
    }
}
