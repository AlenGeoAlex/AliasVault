@inject DbService DbService
@inject GlobalLoadingService GlobalLoadingService

<div class="fixed inset-0 bg-gray-600 bg-opacity-50 z-30 overflow-y-auto h-full w-full" @onclick="OnClose">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800" @onclick:stopPropagation>
        <div class="mt-3">
            <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">Password Generation Settings</h3>
            <div class="mt-4 space-y-4">
                <div>
                    <label for="password-length" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Password Length: @PasswordSettings.Length</label>
                    <input type="range" id="password-length" min="8" max="64"
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                           @bind="PasswordSettings.Length" @oninput="HandleLengthInput">
                </div>

                <div class="flex items-center">
                    <input id="use-lowercase" type="checkbox" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600" 
                           @bind="PasswordSettings.UseLowercase" @bind:after="OnPasswordSettingsChanged">
                    <label for="use-lowercase" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">Include lowercase letters (a-z)</label>
                </div>

                <div class="flex items-center">
                    <input id="use-uppercase" type="checkbox" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600" 
                           @bind="PasswordSettings.UseUppercase" @bind:after="OnPasswordSettingsChanged">
                    <label for="use-uppercase" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">Include uppercase letters (A-Z)</label>
                </div>

                <div class="flex items-center">
                    <input id="use-numbers" type="checkbox" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600" 
                           @bind="PasswordSettings.UseNumbers" @bind:after="OnPasswordSettingsChanged">
                    <label for="use-numbers" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">Include numbers (0-9)</label>
                </div>

                <div class="flex items-center">
                    <input id="use-special-chars" type="checkbox" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600" 
                           @bind="PasswordSettings.UseSpecialChars" @bind:after="OnPasswordSettingsChanged">
                    <label for="use-special-chars" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">Include special characters (!@@#$%^&amp;*)</label>
                </div>

                <div class="flex items-center">
                    <input id="use-non-ambiguous" type="checkbox" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600" 
                           @bind="PasswordSettings.UseNonAmbiguousChars" @bind:after="OnPasswordSettingsChanged">
                    <label for="use-non-ambiguous" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">Avoid ambiguous characters (1, l, I, 0, O, etc.)</label>
                </div>

                <div class="mt-4">
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Preview</label>
                    <div class="mt-1 flex">
                        <input type="text" readonly class="flex-1 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white" value="@_previewPassword">
                        <button type="button" class="ml-2 px-3 py-2 text-sm text-gray-500 dark:text-white bg-gray-200 hover:bg-gray-300 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-md dark:bg-gray-600 dark:hover:bg-gray-700 dark:focus:ring-gray-800" @onclick="RefreshPreview">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                        </button>
                    </div>
                </div>

                <div class="flex @(IsTemporary ? "justify-between" : "justify-end") pt-4">
                    <button type="button" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 dark:bg-gray-700 dark:text-white dark:hover:bg-gray-600" @onclick="OnClose">
                        Cancel
                    </button>
                    @if (IsTemporary)
                    {
                        <button type="button" class="px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-yellow-500 dark:bg-yellow-700 dark:hover:bg-yellow-600" @onclick="OnSaveTemporary">
                            Use Just Once
                        </button>
                    }
                    <button type="button" class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 dark:bg-primary-700 dark:hover:bg-primary-600" @onclick="OnSaveGlobal">
                        Save Globally
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// The PasswordSettings to use.
    /// </summary>
    [Parameter]
    public PasswordSettings PasswordSettings { get; set; } = new();

    /// <summary>
    /// Whether temporary change is allowed. If true, component will show both global and temporary options.
    /// If false, only global settings are available.
    /// </summary>
    [Parameter]
    public bool IsTemporary { get; set; }

    /// <summary>
    /// Callback invoked when settings have been changed, with a boolean indicating if it's a global save.
    /// </summary>
    [Parameter]
    public EventCallback<PasswordSettings> OnSaveSettings { get; set; }

    /// <summary>
    /// Callback invoked when popup is closed.
    /// </summary>
    [Parameter]
    public EventCallback OnClose { get; set; }

    private string _previewPassword = string.Empty;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        RefreshPreview();
    }

    private void RefreshPreview()
    {
        try {
            _previewPassword = CredentialService.GenerateRandomPassword(PasswordSettings);
        }
        catch
        {
            // If password generation fails, ignore it. This can happen if the settings are invalid.
        }
    }

    /// <summary>
    /// Handle input from the password length input.
    /// </summary>
    private void HandleLengthInput(ChangeEventArgs e)
    {
        int newLength;
        if (int.TryParse(e.Value?.ToString(), out newLength))
        {
            PasswordSettings.Length = newLength;
            RefreshPreview();
        }
    }

    /// <summary>
    /// Handle changes to the password settings.
    /// </summary>
    private void OnPasswordSettingsChanged()
    {
        RefreshPreview();
    }

    /// <summary>
    /// Persist changed password settings globally in vault.
    /// </summary>
    private async Task OnSaveGlobal()
    {
        // Save globally to DB
        GlobalLoadingService.Show();
        var settingsJson = System.Text.Json.JsonSerializer.Serialize(PasswordSettings);
        await DbService.Settings.SetSettingAsync("PasswordGenerationSettings", settingsJson);
        GlobalLoadingService.Hide();

        // Notify parent with IsGlobal=true
        await OnSaveSettings.InvokeAsync(PasswordSettings);
        await OnClose.InvokeAsync();
    }

    /// <summary>
    /// Do not persist changes in vault but just return the new settings to the parent component.
    /// </summary>
    private async Task OnSaveTemporary()
    {
        await OnSaveSettings.InvokeAsync(PasswordSettings);
        await OnClose.InvokeAsync();
    }
}
