@using AliasVault.Shared.Models.Spamok
@inherits ComponentBase
@inject IHttpClientFactory HttpClientFactory
@inject HttpClient HttpClient
@inject JsInteropService JsInteropService
@inject DbService DbService
@inject Config Config

@if (EmailModalVisible)
{
    <EmailModal Email="@Email" OnClose="CloseEmailModal" />
}

@if (ShowComponent)
{
    <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
        <div class="flex justify-between">
            <h3 class="mb-4 text-xl font-semibold dark:text-white">Email</h3>
            <button @onclick="LoadRecentEmailsAsync" type="button" class="text-blue-700 border border-blue-700 hover:bg-blue-700 hover:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-full text-sm p-2.5 text-center inline-flex items-center dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:focus:ring-blue-800 dark:hover:bg-blue-500">
                Refresh
            </button>
        </div>

        @if (IsLoading)
        {
            <LoadingIndicator/>
        }
        else if (!string.IsNullOrEmpty(Error))
        {
            <AlertMessageError Message="@Error" />
        }
        else if (MailboxEmails.Count == 0)
        {
            <div>No emails found.</div>
        }
        else
        {
            <div class="flex flex-col mt-6">
                <div class="overflow-x-auto rounded-lg">
                    <div class="inline-block min-w-full align-middle">
                        <div class="overflow-hidden shadow sm:rounded-lg">
                            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-600">
                                <thead class="bg-gray-50 dark:bg-gray-700">
                                <tr>
                                    <th scope="col" class="p-4 text-xs font-medium tracking-wider text-left text-gray-500 uppercase dark:text-white">
                                        Subject
                                    </th>
                                    <th scope="col" class="p-4 text-xs font-medium tracking-wider text-left text-gray-500 uppercase dark:text-white">
                                        Date &amp; Time
                                    </th>
                                </tr>
                                </thead>
                                <tbody class="bg-white dark:bg-gray-800">
                                @foreach (var mail in MailboxEmails)
                                {
                                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-600">
                                        <td class="p-4 text-sm font-normal text-gray-900 whitespace-nowrap dark:text-white">
                                            <span class="cursor-pointer" @onclick="() => OpenEmail(mail.Id)">@(mail.Subject.Substring(0, mail.Subject.Length > 30 ? 30 : mail.Subject.Length))...</span>
                                        </td>
                                        <td class="p-4 text-sm font-normal text-gray-500 whitespace-nowrap dark:text-gray-400">
                                            <span class="cursor-pointer" @onclick="() => OpenEmail(mail.Id)">@mail.DateSystem</span>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    /// <summary>
    /// The email address to show recent emails for.
    /// </summary>
    [Parameter]
    public string EmailAddress { get; set; } = string.Empty;

    private List<MailboxEmailApiModel> MailboxEmails { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private bool ShowComponent { get; set; } = false;
    private EmailApiModel Email { get; set; } = new();
    private bool EmailModalVisible { get; set; }
    private string Error { get; set; } = string.Empty;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Check if email has a known SpamOK domain, if not, don't show this component.
        if (IsSpamOkDomain(EmailAddress) || IsAliasVaultDomain(EmailAddress))
        {
            ShowComponent = true;
        }
    }

    /// <summary>
    /// Returns true if the email address is from a known SpamOK domain.
    /// </summary>
    protected bool IsSpamOkDomain(string email)
    {
        return email.EndsWith("@spamok.nl") ||
               email.EndsWith("@spamok.de") ||
               email.EndsWith("@spamok.es") ||
               email.EndsWith("@spamok.fr") ||
               email.EndsWith("@spamok.com") ||
               email.EndsWith("@spamok.com.ua") ||
               email.EndsWith("@landmail.nl") ||
               email.EndsWith("@landmeel.nl") ||
               email.EndsWith("@asdasd.nl") ||
               email.EndsWith("@sdfsdf.nl") ||
               email.EndsWith("@solarflarecorp.com");
    }

    /// <summary>
    /// Returns true if the email address is from a known AliasVault domain.
    /// </summary>
    protected bool IsAliasVaultDomain(string email)
    {
        foreach (var domain in Config.SmtpAllowedDomains)
        {
            if (email.EndsWith(domain))
            {
                return true;
            }
        }

        return false;
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!ShowComponent)
        {
            return;
        }

        if (firstRender)
        {
            await LoadRecentEmailsAsync();
        }
    }

    private async Task LoadRecentEmailsAsync()
    {
        if (!ShowComponent)
        {
            return;
        }

        Error = string.Empty;

        IsLoading = true;
        StateHasChanged();

        // Get email prefix, which is the part before the @ symbol.
        string emailPrefix = EmailAddress.Split('@')[0];

        MailboxApiModel? mailbox = new();

        if (IsSpamOkDomain(EmailAddress))
        {
            // We construct a new HttpClient to avoid using the default one, which is used for the API and sends
            // the Authorization header. We don't want to send the Authorization header to the external email API.
            var client = HttpClientFactory.CreateClient("EmailClient");
            mailbox = await client.GetFromJsonAsync<MailboxApiModel>($"https://api.spamok.com/v2/EmailBox/{emailPrefix}");

            if (mailbox?.Mails != null)
            {
                // Show maximum of 10 recent emails.
                MailboxEmails = mailbox.Mails.Take(10).ToList();
            }
        }
        else if (IsAliasVaultDomain(EmailAddress))
        {
            try
            {
                mailbox = await HttpClient.GetFromJsonAsync<MailboxApiModel>($"api/v1/EmailBox/{EmailAddress}");
                if (mailbox?.Mails != null)
                {
                    // Show maximum of 10 recent emails.
                    MailboxEmails = mailbox.Mails.Take(10).ToList();
                }

                // Loop through emails and decrypt the subject locally.
                var context = await DbService.GetDbContextAsync();
                var privateKeys = await context.EncryptionKeys.ToListAsync();
                foreach (var mail in MailboxEmails)
                {
                    var privateKey = privateKeys.FirstOrDefault(x => x.PublicKey == mail.EncryptionKey);
                    if (privateKey is not null)
                    {
                        try
                        {
                            var decryptedSymmetricKey = await JsInteropService.DecryptWithPrivateKey(mail.EncryptedSymmetricKey, privateKey.PrivateKey);
                            mail.Subject = await JsInteropService.SymmetricDecrypt(mail.Subject, Convert.ToBase64String(decryptedSymmetricKey));
                        }
                        catch (Exception ex)
                        {
                            Error = ex.Message;
                            Console.WriteLine(ex);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Error = ex.Message;
                Console.WriteLine(ex);
            }
        }

        IsLoading = false;
        StateHasChanged();
    }

    /// <summary>
    /// Open the email modal.
    /// </summary>
    private async Task OpenEmail(int emailId)
    {
        // Get email prefix, which is the part before the @ symbol.
        string emailPrefix = EmailAddress.Split('@')[0];


        if (IsSpamOkDomain(EmailAddress))
        {
            var client = HttpClientFactory.CreateClient("EmailClient");
            EmailApiModel? mail = await client.GetFromJsonAsync<EmailApiModel>($"https://api.spamok.com/v2/Email/{emailPrefix}/{emailId}");
            if (mail != null)
            {
                Email = mail;
                EmailModalVisible = true;
                StateHasChanged();
            }
        }
        else if (IsAliasVaultDomain(EmailAddress))
        {
            EmailApiModel? mail = await HttpClient.GetFromJsonAsync<EmailApiModel>($"api/v1/Email/{emailId}");
            if (mail != null)
            {
                // Decrypt the email content locally.
                var context = await DbService.GetDbContextAsync();
                var privateKey = await context.EncryptionKeys.FirstOrDefaultAsync(x => x.PublicKey == mail.EncryptionKey);
                if (privateKey is not null)
                {
                    try
                    {
                        var decryptedSymmetricKey = await JsInteropService.DecryptWithPrivateKey(mail.EncryptedSymmetricKey, privateKey.PrivateKey);
                        mail.Subject = await JsInteropService.SymmetricDecrypt(mail.Subject, Convert.ToBase64String(decryptedSymmetricKey));
                        if (mail.MessageHtml is not null)
                        {
                            mail.MessageHtml = await JsInteropService.SymmetricDecrypt(mail.MessageHtml, Convert.ToBase64String(decryptedSymmetricKey));
                        }

                        if (mail.MessagePlain is not null)
                        {
                            mail.MessagePlain = await JsInteropService.SymmetricDecrypt(mail.MessagePlain, Convert.ToBase64String(decryptedSymmetricKey));
                        }

                        mail.FromDisplay = await JsInteropService.SymmetricDecrypt(mail.FromDisplay, Convert.ToBase64String(decryptedSymmetricKey));
                        mail.FromLocal = await JsInteropService.SymmetricDecrypt(mail.FromLocal, Convert.ToBase64String(decryptedSymmetricKey));
                        mail.FromDomain = await JsInteropService.SymmetricDecrypt(mail.FromDomain, Convert.ToBase64String(decryptedSymmetricKey));
                    }
                    catch (Exception ex)
                    {
                        Error = ex.Message;
                    }
                }

                Email = mail;
                EmailModalVisible = true;
                StateHasChanged();
            }

        }

    }

    /// <summary>
    /// Close the email modal.
    /// </summary>
    private void CloseEmailModal()
    {
        EmailModalVisible = false;
        StateHasChanged();
    }
}
