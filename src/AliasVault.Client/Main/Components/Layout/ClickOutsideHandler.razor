@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@ChildContent

@code {
    /// <summary>
    /// Callback when clicked outside the child.
    /// </summary>
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter] public string ContentId { get; set; } = "modal-content";

    [Parameter] public RenderFragment ChildContent { get; set; } = null!;

    private DotNetObjectReference<ClickOutsideHandler>? ObjRef { get; set; }
    private IJSObjectReference module { get; set; } = null!;
    private bool IsModuleLoaded { get;set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadModuleAsync();
    }

    private async Task LoadModuleAsync()
    {
        if (!IsModuleLoaded)
        {
            Console.WriteLine("Loading module clckoutside");

            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/clickOutsideHandler.js");
            ObjRef = DotNetObjectReference.Create(this);
            IsModuleLoaded = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadModuleAsync();

        if (IsModuleLoaded)
        {
            await module.InvokeVoidAsync("registerClickOutsideHandler", ObjRef, ContentId, nameof(CloseHandler));
        }
    }

    [JSInvokable]
    public async Task CloseHandler()
    {
        Console.WriteLine("Click outisde handler invoked");
        await OnClose.InvokeAsync();
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (module != null)
        {
            await module.InvokeVoidAsync("unregisterClickOutsideHandler");
            await module.DisposeAsync();
        }

        ObjRef?.Dispose();
    }
}
