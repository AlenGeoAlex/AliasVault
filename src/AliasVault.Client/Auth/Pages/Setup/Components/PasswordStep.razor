@using System.Timers
@using System.Net.Http.Json
@implements IDisposable
@inject JsInteropService JsInteropService

<div class="w-full max-w-md mx-auto">
    @if (isLoading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-primary-500"></div>
        </div>
    }
    <div class="@(isLoading ? "opacity-0" : "opacity-100 transition-opacity duration-300") w-full">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-6">
            <div class="flex items-start mb-4">
                <div class="flex-shrink-0">
                    <img class="h-10 w-10 rounded-full" src="/img/avatar.webp" alt="AliasVault Assistant">
                </div>
                <div class="ml-3 bg-blue-100 dark:bg-blue-900 rounded-lg p-3">
                    <p class="text-sm text-gray-900 dark:text-white">
                        Great! Now, let's set up your master password for AliasVault.
                    </p>
                    <p class="text-sm text-gray-900 dark:text-white mt-3">
                        Please enter a strong master password for your account. Your username is: <strong>@Username</strong>
                    </p>
                    <p class="text-sm text-gray-900 dark:text-white mt-3 font-semibold">
                        Important: This master password will be used to encrypt your vault. It should be a long, complex string that you can remember. If you forget this password, your data will be permanently inaccessible.
                    </p>
                    <ul class="text-sm text-gray-900 dark:text-white mt-3 list-disc list-inside">
                        <li>Your master password never leaves your device</li>
                        <li>The server has no access to your unencrypted data</li>
                        <li>Even the server admin cannot restore your access if you forget this password</li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="space-y-4">
            <div>
                <div class="">
                    <EditFormRow Id="password" Label="Master Password" @bind-Value="Password" Type="password" Placeholder="Enter your master password" OnFocus="@OnPasswordInputFocus"/>
                </div>
                <div class="mt-4">
                    <EditFormRow Id="confirmPassword" Label="Confirm Master Password" @bind-Value="ConfirmPassword" Type="password" Placeholder="Confirm your master password" OnFocus="@OnPasswordInputFocus" />
                </div>
                @if (isValidating)
                {
                    <div class="mt-2 text-sm text-gray-600 dark:text-gray-400">Validating password...</div>
                }
                else if (isValid)
                {
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="mt-2 text-sm text-yellow-600 dark:text-yellow-400">@errorMessage</div>
                    }
                    else
                    {
                        <div class="mt-2 text-sm text-green-600 dark:text-green-400">Password is valid and strong!</div>
                    }
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="mt-2 text-sm text-red-600 dark:text-red-400">@errorMessage</div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string _password = string.Empty;
    private string _confirmPassword = string.Empty;
    private bool isValid = false;
    private bool isValidating = false;
    private string errorMessage = string.Empty;
    private Timer? debounceTimer;

    [Inject]
    private HttpClient Http { get; set; } = null!;

    [Parameter]
    public string Username { get; set; } = string.Empty;

    public string Password
    {
        get => _password;
        set
        {
            if (_password != value)
            {
                _password = value;
                ValidatePassword();
            }
        }
    }

    public string ConfirmPassword
    {
        get => _confirmPassword;
        set
        {
            if (_confirmPassword != value)
            {
                _confirmPassword = value;
                ValidatePassword();
            }
        }
    }

    [Parameter]
    public EventCallback<string> OnPasswordChange { get; set; }

    private bool isLoading = true;
    private Timer? loadingTimer;

    protected override void OnInitialized()
    {
        loadingTimer = new Timer(300);
        loadingTimer.Elapsed += (sender, e) => FinishLoading();
        loadingTimer.AutoReset = false;
        loadingTimer.Start();

        debounceTimer = new Timer(300);
        debounceTimer.Elapsed += async (sender, e) => await ValidatePasswordDebounced();
        debounceTimer.AutoReset = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100); // Give time for the DOM to update
            await JsInteropService.FocusElementById("password");
        }
    }

    private void FinishLoading()
    {
        isLoading = false;
        InvokeAsync(StateHasChanged);
    }

    private void ValidatePassword()
    {
        isValidating = true;
        isValid = false;
        errorMessage = string.Empty;
        StateHasChanged();

        debounceTimer?.Stop();
        debounceTimer?.Start();
    }

    private async Task ValidatePasswordDebounced()
    {
        await InvokeAsync(async () =>
        {
            if (Password.Length < 10)
            {
                isValidating = false;
                isValid = false;
                errorMessage = "Master password must be at least 10 characters long.";
                await OnPasswordChange.InvokeAsync(string.Empty);
                StateHasChanged();
                return;
            }

            if (string.IsNullOrWhiteSpace(ConfirmPassword))
            {
                isValidating = false;
                isValid = false;
                errorMessage = "Confirm your password by entering it again.";
                await OnPasswordChange.InvokeAsync(string.Empty);
                StateHasChanged();
                return;
            }

            if (Password != ConfirmPassword)
            {
                isValidating = false;
                isValid = false;
                errorMessage = "Passwords do not match.";
                await OnPasswordChange.InvokeAsync(string.Empty);
                StateHasChanged();
                return;
            }

            // If password is valid
            isValid = true;
            errorMessage = string.Empty;

            // Show warning for passwords between 10 and 13 characters
            if (Password.Length < 14)
            {
                errorMessage = "Password is valid, but could be stronger if made longer.";
            }

            await OnPasswordChange.InvokeAsync(Password);

            isValidating = false;
            StateHasChanged();
        });
    }

    private void OnPasswordInputFocus(FocusEventArgs args)
    {
        // Reset validation state when the input is focused
        isValid = false;
        isValidating = false;
        errorMessage = string.Empty;
        StateHasChanged();
    }

    public void Dispose()
    {
        loadingTimer?.Dispose();
        debounceTimer?.Dispose();
    }
}
