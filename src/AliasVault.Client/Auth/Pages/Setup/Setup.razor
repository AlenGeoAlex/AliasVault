@page "/user/setup"
@using AliasVault.Client.Auth.Pages.Setup.Components
@inherits AliasVault.Client.Auth.Pages.Base.LoginBase
@layout Auth.Layout.EmptyLayout
@attribute [AllowAnonymous]

<div class="min-h-screen bg-gray-100 dark:bg-gray-900 flex items-center justify-center">
    <div class="w-full mx-auto lg:max-w-xl lg:bg-white lg:dark:bg-gray-800 lg:shadow-xl lg:rounded-lg lg:overflow-hidden">
        <div class="flex flex-col min-h-screen lg:min-h-0">
            <div class="flex-grow p-8 pb-0">
                <div class="flex justify-between items-center mb-4">
                    <div>
                        <button @onclick="GoBack" class="text-gray-500 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200 @(currentStep == SetupStep.Welcome ? "invisible" : "")">
                            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                            </svg>
                        </button>
                    </div>
                    <div class="flex-grow text-center">
                        <h2 class="text-xl font-semibold text-gray-900 dark:text-white">@GetStepTitle(currentStep)</h2>
                    </div>
                    <button @onclick="CancelSetup" class="text-gray-500 -mt-1 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                @if (GetProgressPercentage() > 0)
                {
                    <div class="w-full bg-gray-200 rounded-full h-2.5 mb-4 dark:bg-gray-700 mt-4">
                        <div class="bg-primary-600 h-2.5 rounded-full" style="width: @(GetProgressPercentage())%"></div>
                    </div>
                }

                @switch (currentStep)
                {
                    case SetupStep.Welcome:
                        <WelcomeStep />
                        break;
                    case SetupStep.TermsAndConditions:
                        <TermsAndConditionsStep
                            AgreedToTerms="@setupData.AgreedToTerms"
                            OnAgreedToTermsChanged="@HandleAgreedToTermsChanged" />
                        break;
                    case SetupStep.Username:
                        <UsernameStep
                            DefaultUsername="@setupData.Username"
                            OnUsernameChange="@((string username) => { setupData.Username = username; StateHasChanged(); })" />
                        break;
                    case SetupStep.Password:
                        <PasswordStep
                            Username="@setupData.Username"
                            OnPasswordChange="@((string pwd) => { setupData.Password = pwd; StateHasChanged(); })" />
                        break;
                    case SetupStep.Creating:
                        <CreatingStep Username="@setupData.Username" Password="@setupData.Password" />
                        break;
                }
            </div>
            <div class="p-8 bg-gray-100 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 lg:bg-transparent lg:dark:bg-transparent lg:border-0">
                @if (currentStep == SetupStep.Password && !string.IsNullOrWhiteSpace(setupData.Password))
                {
                    <button @onclick="GoNext"
                            class="w-full py-3 px-4 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-lg transition duration-300 ease-in-out">
                        Create Account
                    </button>
                }
                else if (currentStep != SetupStep.Creating)
                {
                    <button @onclick="GoNext"
                            class="w-full py-3 px-4 bg-primary-600 hover:bg-primary-700 text-white font-semibold rounded-lg transition duration-300 ease-in-out @(isNextEnabled ? "" : "opacity-50 cursor-not-allowed")"
                            disabled="@(!isNextEnabled)">
                        Continue
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private SetupStep currentStep = SetupStep.Welcome;
    private SetupData setupData = new();
    private bool isNextEnabled => currentStep switch
    {
        SetupStep.Welcome => true,
        SetupStep.TermsAndConditions => setupData.AgreedToTerms,
        SetupStep.Username => !string.IsNullOrWhiteSpace(setupData.Username),
        SetupStep.Password => !string.IsNullOrWhiteSpace(setupData.Password),
        _ => false
    };

    private void GoBack()
    {
        switch (currentStep)
        {
            case SetupStep.TermsAndConditions:
                currentStep = SetupStep.Welcome;
                break;
            case SetupStep.Username:
                currentStep = SetupStep.TermsAndConditions;
                break;
            case SetupStep.Password:
                currentStep = SetupStep.Username;
                break;
            case SetupStep.Creating:
                currentStep = SetupStep.Password;
                break;
        }
    }

    private void GoNext()
    {
        currentStep = currentStep switch
        {
            SetupStep.Welcome => SetupStep.TermsAndConditions,
            SetupStep.TermsAndConditions => SetupStep.Username,
            SetupStep.Username => SetupStep.Password,
            SetupStep.Password => SetupStep.Creating,
            _ => currentStep
        };
    }

    private void CancelSetup()
    {
        NavigationManager.NavigateTo("/");
    }

    private void HandleAgreedToTermsChanged(bool agreed)
    {
        setupData.AgreedToTerms = agreed;
        StateHasChanged();
    }

    private enum SetupStep
    {
        Welcome,
        TermsAndConditions,
        Username,
        Password,
        Creating
    }

    private class SetupData
    {
        public bool AgreedToTerms { get; set; }
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private string GetStepTitle(SetupStep step)
    {
        return step switch
        {
            SetupStep.Welcome => "Welcome to AliasVault",
            SetupStep.TermsAndConditions => "Using AliasVault",
            SetupStep.Username => "Choose Username",
            SetupStep.Password => "Set Password",
            SetupStep.Creating => "Creating Vault",
            _ => "Setup"
        };
    }

    private int GetProgressPercentage()
    {
        return (int)currentStep * 100 / (Enum.GetValues(typeof(SetupStep)).Length - 1);
    }
}
