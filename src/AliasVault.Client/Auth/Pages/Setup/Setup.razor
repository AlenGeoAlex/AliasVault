@page "/user/setup"
@using AliasVault.Client.Auth.Pages.Setup.Components
@inherits AliasVault.Client.Auth.Pages.Base.LoginBase
@layout Auth.Layout.EmptyLayout
@attribute [AllowAnonymous]
@inject IConfiguration Configuration
@using System.Text.Json
@using AliasVault.Shared.Models.WebApi.Auth
@using AliasVault.Client.Utilities
@using AliasVault.Cryptography.Client
@using SecureRemotePassword

<div class="min-h-screen bg-gray-100 dark:bg-gray-900 flex items-center justify-center">
    <div class="w-full mx-auto lg:max-w-xl lg:bg-white lg:dark:bg-gray-800 lg:shadow-xl lg:rounded-lg lg:overflow-hidden">
        <div class="flex flex-col min-h-screen lg:min-h-0">
            <div class="flex-grow p-8 pb-0">
                <div class="flex justify-between items-center mb-4">
                    <div>
                        <button @onclick="GoBack" class="text-gray-500 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200 @(currentStep == SetupStep.Welcome ? "invisible" : "")">
                            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                            </svg>
                        </button>
                    </div>
                    <button @onclick="CancelSetup" class="text-gray-500 -mt-1 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>

                @switch (currentStep)
                {
                    case SetupStep.Welcome:
                        <WelcomeStep />
                        break;
                    case SetupStep.Purpose:
                        <TermsAndConditionsStep OnAgreedToTermsChanged="@HandleAgreedToTermsChanged" />
                        break;
                    case SetupStep.PurposeInstructions:
                        <PurposeInstructionsStep />
                        break;
                    case SetupStep.UserInfo:
                        <UsernameStep
                            DefaultUsername="@setupData.Username"
                            OnUsernameChange="@((string username) => { setupData.Username = username; StateHasChanged(); })" />
                        break;
                    case SetupStep.Password:
                        <PasswordStep
                            Username="@setupData.Username"
                            OnPasswordChange="@((string pwd) => { setupData.Password = pwd; StateHasChanged(); })" />
                        break;
                }
            </div>
            <div class="p-8 bg-gray-100 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 lg:bg-transparent lg:dark:bg-transparent lg:border-0">
                @if (currentStep == SetupStep.Password && !string.IsNullOrWhiteSpace(setupData.Password))
                {
                    <button @onclick="CompleteSetup"
                            class="w-full py-3 px-4 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-lg transition duration-300 ease-in-out">
                        Create Account
                    </button>
                }
                else
                {
                    <button @onclick="GoNext"
                            class="w-full py-3 px-4 bg-primary-600 hover:bg-primary-700 text-white font-semibold rounded-lg transition duration-300 ease-in-out @(isNextEnabled ? "" : "opacity-50 cursor-not-allowed")"
                            disabled="@(!isNextEnabled)">
                        Continue
                    </button>
                }
            </div>
        </div>
    </div>
</div>

<FullScreenLoadingIndicator @ref="LoadingIndicator"/>

@code {
    private FullScreenLoadingIndicator LoadingIndicator = new();
    private SetupStep currentStep = SetupStep.Welcome;
    private SetupData setupData = new();
    private bool isNextEnabled => currentStep switch
    {
        SetupStep.Welcome => true,
        SetupStep.Purpose => setupData.AgreedToTerms,
        SetupStep.PurposeInstructions => true,
        SetupStep.UserInfo => !string.IsNullOrWhiteSpace(setupData.Username),
        SetupStep.Password => !string.IsNullOrWhiteSpace(setupData.Password),
        _ => false
    };

    private void GoBack()
    {
        switch (currentStep)
        {
            case SetupStep.Purpose:
                currentStep = SetupStep.Welcome;
                break;
            case SetupStep.PurposeInstructions:
                currentStep = SetupStep.Purpose;
                break;
            case SetupStep.UserInfo:
                currentStep = SetupStep.PurposeInstructions;
                break;
            case SetupStep.Password:
                currentStep = SetupStep.UserInfo;
                break;
        }
    }

    private void GoNext()
    {
        currentStep = currentStep switch
        {
            SetupStep.Welcome => SetupStep.Purpose,
            SetupStep.Purpose => SetupStep.PurposeInstructions,
            SetupStep.PurposeInstructions => SetupStep.UserInfo,
            SetupStep.UserInfo => SetupStep.Password,
            _ => currentStep
        };
    }

    private async Task CompleteSetup()
    {
        LoadingIndicator.Show();
        StateHasChanged();

        try
        {
            var client = new SrpClient();
            var salt = client.GenerateSalt();

            string encryptionType = Defaults.EncryptionType;
            string encryptionSettings = Defaults.EncryptionSettings;
            if (Configuration["CryptographyOverrideType"] is not null && Configuration["CryptographyOverrideSettings"] is not null)
            {
                encryptionType = Configuration["CryptographyOverrideType"]!;
                encryptionSettings = Configuration["CryptographyOverrideSettings"]!;
            }

            var passwordHash = await Encryption.DeriveKeyFromPasswordAsync(setupData.Password, salt, encryptionType, encryptionSettings);
            var passwordHashString = BitConverter.ToString(passwordHash).Replace("-", string.Empty);
            var srpSignup = Srp.PasswordChangeAsync(client, salt, setupData.Username, passwordHashString);

            var registerRequest = new RegisterRequest(srpSignup.Username, srpSignup.Salt, srpSignup.Verifier, encryptionType, encryptionSettings);
            var result = await Http.PostAsJsonAsync("api/v1/Auth/register", registerRequest);
            var responseContent = await result.Content.ReadAsStringAsync();

            if (!result.IsSuccessStatusCode)
            {
                foreach (var error in ApiResponseUtility.ParseErrorResponse(responseContent))
                {
                    GlobalNotificationService.AddErrorMessage(error);
                }
                StateHasChanged();
                return;
            }

            var tokenObject = JsonSerializer.Deserialize<TokenModel>(responseContent);

            if (tokenObject != null)
            {
                await AuthService.StoreEncryptionKeyAsync(passwordHash);
                await AuthService.StoreAccessTokenAsync(tokenObject.Token);
                await AuthService.StoreRefreshTokenAsync(tokenObject.RefreshToken);
                await AuthStateProvider.GetAuthenticationStateAsync();

                GlobalNotificationService.AddSuccessMessage("Account created successfully!");
                NavigationManager.NavigateTo("/");
            }
            else
            {
                GlobalNotificationService.AddErrorMessage("An error occurred during registration.");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            GlobalNotificationService.AddErrorMessage($"An error occurred: {ex.Message}");
        }
        finally
        {
            LoadingIndicator.Hide();
            StateHasChanged();
        }
    }

    private void CancelSetup()
    {
        NavigationManager.NavigateTo("/");
    }

    private void HandleAgreedToTermsChanged(bool agreed)
    {
        setupData.AgreedToTerms = agreed;
        StateHasChanged();
    }

    private enum SetupStep
    {
        Welcome,
        Purpose,
        PurposeInstructions,
        UserInfo,
        Password
    }

    private class SetupData
    {
        public bool AgreedToTerms { get; set; }
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private string GetStepTitle(SetupStep step)
    {
        return step switch
        {
            SetupStep.Welcome => "Welcome",
            SetupStep.Purpose => "Terms and Conditions",
            SetupStep.PurposeInstructions => "Purpose Instructions",
            SetupStep.UserInfo => "Choose Username",
            SetupStep.Password => "Set Password",
            _ => "Setup"
        };
    }

    private int GetProgressPercentage()
    {
        return (int)currentStep * 100 / (Enum.GetValues(typeof(SetupStep)).Length - 1);
    }
}
