@inherits LayoutComponentBase
@implements IDisposable
@inject DbService DbService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@using AliasVault.WebApp.Providers

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <TopMenu />
            <div class="flex pt-16 overflow-hidden bg-gray-50 dark:bg-gray-900">
                <div id="main-content" class="relative w-full max-w-screen-2xl mx-auto h-full overflow-y-auto bg-gray-50 dark:bg-gray-900">
                    @if (IsDbInitialized)
                    {
                        <main>
                            @Body
                        </main>
                        <Footer />
                    }
                    else
                    {
                        <div class="fixed inset-0 overflow-y-auto h-full w-full flex items-center justify-center">
                            <div class="relative p-8 bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md mx-auto">
                                <div class="text-center">
                                    <svg class="mx-auto animate-spin h-12 w-12 text-primary-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    <h2 class="mt-4 text-xl font-semibold text-gray-900 dark:text-white">Vault decryption in progress</h2>
                                    <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">Please wait while your vault is initialized. This may take a moment.</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <main>
                @Body
            </main>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private bool IsDbInitialized { get; set; } = false;
    private const int MinimumLoadingTimeMs = 800;

    [CascadingParameter] private Task<AuthenticationState>? AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        DbService.GetState().StateChanged += OnDatabaseStateChanged;
        AuthStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        await CheckAndInitializeDatabase();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (AuthState != null)
        {
            var authState = await AuthState;
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                await CheckAndInitializeDatabase();
            }
        }
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            await CheckAndInitializeDatabase();
        }
        StateHasChanged();
    }

    private async Task CheckAndInitializeDatabase()
    {
        var currentState = DbService.GetState().CurrentState;
        if (currentState.Status == DbServiceState.DatabaseStatus.Uninitialized)
        {
            await InitializeDatabaseWithProgress();
        }
        else if (currentState.Status == DbServiceState.DatabaseStatus.Initialized)
        {
            IsDbInitialized = true;
            StateHasChanged();
        }
    }

    private async void OnDatabaseStateChanged(object? sender, DbServiceState.DatabaseState newState)
    {
        if (newState.Status == DbServiceState.DatabaseStatus.Uninitialized)
        {
            await InitializeDatabaseWithProgress();
        }
        else if (newState.Status == DbServiceState.DatabaseStatus.Initialized)
        {
            IsDbInitialized = true;
        }
        StateHasChanged();
    }

    private async Task InitializeDatabaseWithProgress()
    {
        IsDbInitialized = false;
        StateHasChanged();

        var stopwatch = System.Diagnostics.Stopwatch.StartNew();

        await DbService.InitializeDatabaseAsync();

        stopwatch.Stop();
        var elapsedMs = (int)stopwatch.ElapsedMilliseconds;

        if (elapsedMs < MinimumLoadingTimeMs)
        {
            await Task.Delay(MinimumLoadingTimeMs - elapsedMs);
        }

        IsDbInitialized = true;
        StateHasChanged();
    }

    public void Dispose()
    {
        DbService.GetState().StateChanged -= OnDatabaseStateChanged;
        AuthStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
