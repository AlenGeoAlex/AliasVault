@page "/add-credentials"
@page "/credentials/{id:guid}/edit"
@inherits MainBase
@inject CredentialService CredentialService
@using System.Globalization
@using AliasGenerators.Implementations
@using AliasGenerators.Password.Implementations
@using AliasVault.Shared.Models

@if (EditMode)
{
    <LayoutPageTitle>Edit credentials</LayoutPageTitle>
}
else {
    <LayoutPageTitle>Add credentials</LayoutPageTitle>
}

<div class="grid grid-cols-1 px-4 pt-6 xl:grid-cols-3 xl:gap-4 dark:bg-gray-900">
    <div class="mb-4 col-span-full xl:mb-2">
        <Breadcrumb BreadcrumbItems="BreadcrumbItems" />
        <div class="flex items-center justify-between">
            @if (EditMode)
            {
                <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">Edit credentials</h1>
            }
            else {
                <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">Add credentials</h1>
            }
        </div>
        @if (EditMode)
        {
            <p>Edit the existing credentials entry below.</p>
        }
        else {
            <p>Create a new credentials entry below.</p>
        }
    </div>
</div>

@if (Loading)
{
    <LoadingIndicator />
}
else
{
    <EditForm Model="Obj" OnValidSubmit="SaveAlias">
        <DataAnnotationsValidator />
        <div class="grid grid-cols-3 px-4 pt-6 lg:gap-4 dark:bg-gray-900">
            <div class="col-1">
                <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                    <h3 class="mb-4 text-xl font-semibold dark:text-white">Service</h3>
                    <div class="grid gap-6">
                        <div class="col-span-6 sm:col-span-3">
                            <EditFormRow Id="service-name" Label="Service Name" @bind-Value="Obj.ServiceName"></EditFormRow>
                            <ValidationMessage For="() => Obj.ServiceName"/>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <EditFormRow Id="service-url" Label="Service URL" @bind-Value="Obj.ServiceUrl"></EditFormRow>
                        </div>
                    </div>
                </div>

                <div class="col">
                    <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                        <h3 class="mb-4 text-xl font-semibold dark:text-white">Notes</h3>
                        <div class="grid gap-6">
                            <div class="col-span-6 sm:col-span-3">
                                <EditFormRow Type="textarea" Id="first-name" Label="Notes" @bind-Value="Obj.Notes"></EditFormRow>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col">
                    <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                        <h3 class="mb-4 text-xl font-semibold dark:text-white">Attachments</h3>
                        <div class="grid gap-6">
                            <div class="col-span-6 sm:col-span-3">
                                <AttachmentUploader
                                    Attachments="@Obj.Attachments"
                                    AttachmentsChanged="@HandleAttachmentsChanged" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col col-span-2">
                <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                    <h3 class="mb-4 text-xl font-semibold dark:text-white">Login credentials</h3>
                    <div class="mb-4">
                        <button type="button" class="px-4 py-2 text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 dark:bg-blue-500 dark:hover:bg-blue-600 dark:focus:ring-blue-800" @onclick="GenerateRandomIdentity">Generate Random Identity</button>
                        <button type="submit" class="px-4 py-2 text-white bg-green-600 rounded-lg hover:bg-green-700 focus:ring-4 focus:ring-green-300 dark:bg-green-500 dark:hover:bg-green-600 dark:focus:ring-green-800">Save Credentials</button>
                        @if (IsIdentityLoading)
                        {
                            <p>Loading...</p>
                        }
                    </div>
                    <div class="grid gap-6">
                        <div class="col-span-6 sm:col-span-3">
                            <EditFormRow Id="email" Label="Email" @bind-Value="Obj.Alias.EmailPrefix"></EditFormRow>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <EditFormRow Id="username" Label="Username" @bind-Value="Obj.Username"></EditFormRow>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <div class="relative">
                                <EditFormRow Id="password" Label="Password" @bind-Value="Obj.Password.Value"></EditFormRow>
                                <button type="submit" class="text-white absolute end-1 bottom-1 bg-gray-700 hover:bg-gray-800 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-gray-600 dark:hover:bg-gray-700 dark:focus:ring-gray-800" @onclick="GenerateRandomPassword">(Re)generate Random Password</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col">
                    <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                        <h3 class="mb-4 text-xl font-semibold dark:text-white">Identity</h3>
                        <div class="grid gap-6">
                            <div class="col-span-6 sm:col-span-3">
                                <EditFormRow Id="first-name" Label="First Name" @bind-Value="Obj.Alias.FirstName"></EditFormRow>
                            </div>
                            <div class="col-span-6 sm:col-span-3">
                                <EditFormRow Id="last-name" Label="Last Name" @bind-Value="Obj.Alias.LastName"></EditFormRow>
                            </div>
                            <div class="col-span-6 sm:col-span-3">
                                <EditFormRow Id="nickname" Label="Nick Name" @bind-Value="Obj.Alias.NickName"></EditFormRow>
                            </div>
                            <div class="col-span-6 sm:col-span-3">
                                <EditFormRow Id="gender" Label="Gender" @bind-Value="Obj.Alias.Gender"></EditFormRow>
                            </div>
                            <div class="col-span-6 sm:col-span-3">
                                <EditFormRow Id="birthdate" Label="Birth Date" @bind-Value="Obj.AliasBirthDate"></EditFormRow>
                                <ValidationMessage For="() => Obj.AliasBirthDate"/>
                            </div>
                            <div class="col-span-6 sm:col-span-3">
                                <EditFormRow Id="street" Label="Address Street" @bind-Value="Obj.Alias.AddressStreet"></EditFormRow>
                            </div>
                            <div class="col-span-6 sm:col-span-3">
                                <EditFormRow Id="city" Label="Address City" @bind-Value="Obj.Alias.AddressCity"></EditFormRow>
                            </div>
                            <div class="col-span-6 sm:col-span-3">
                                <EditFormRow Id="state" Label="Address State" @bind-Value="Obj.Alias.AddressState"></EditFormRow>
                            </div>
                            <div class="col-span-6 sm:col-span-3">
                                <EditFormRow Id="zipcode" Label="Address Zip Code" @bind-Value="Obj.Alias.AddressZipCode"></EditFormRow>
                            </div>
                            <div class="col-span-6 sm:col-span-3">
                                <EditFormRow Id="country" Label="Address Country" @bind-Value="Obj.Alias.AddressCountry"></EditFormRow>
                            </div>
                            <div class="col-span-6 sm:col-span-3">
                                <EditFormRow Id="hobbies" Label="Hobbies" @bind-Value="Obj.Alias.Hobbies"></EditFormRow>
                            </div>
                            <div class="col-span-6 sm:col-span-3">
                                <EditFormRow Id="phone-mobile" Label="Phone Mobile" @bind-Value="Obj.Alias.PhoneMobile"></EditFormRow>
                            </div>
                            <div class="col-span-6 sm:col-span-3">
                                <EditFormRow Id="iban" Label="Bank Account IBAN" @bind-Value="Obj.Alias.BankAccountIBAN"></EditFormRow>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="px-4 py-2 text-white bg-green-600 rounded-lg hover:bg-green-700 focus:ring-4 focus:ring-green-300 dark:bg-green-500 dark:hover:bg-green-600 dark:focus:ring-green-800">Save Credentials</button>
                </div>
            </div>
        </div>

        <div class="grid px-4 pt-6 lg:gap-4 dark:bg-gray-900">

        </div>
    </EditForm>

    @if (IsSaving)
    {
        <p>Saving...</p>
    }

}

@code {
    /// <summary>
    /// Gets or sets the Credentials ID.
    /// </summary>
    [Parameter]
    public Guid? Id { get; set; }

    private bool EditMode { get; set; }
    private bool Loading { get; set; } = true;
    private CredentialEdit Obj { get; set; } = new();
    private bool IsIdentityLoading { get; set; }
    private bool IsSaving { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        if (Id.HasValue)
        {
            // Edit mode
            EditMode = true;
        }
        else
        {
            // Add mode
            EditMode = false;
        }
    }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (EditMode)
        {
            BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = "View credential", Url = $"/credentials/{Id}" });
            BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = "Edit credential" });
        }
        else
        {
            BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = "Add new credential" });
        }
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            if (EditMode)
            {
                if (Id is null)
                {
                    // Error loading alias.
                    GlobalNotificationService.AddErrorMessage("This credential does not exist (anymore). Please try again.");
                    NavigationManager.NavigateTo("/", false, true);
                    return;
                }

                // Load existing Obj, retrieve from service
                var alias = await CredentialService.LoadEntryAsync(Id.Value);
                if (alias is null)
                {
                    // Error loading alias.
                    GlobalNotificationService.AddErrorMessage("This credential does not exist (anymore). Please try again.");
                    NavigationManager.NavigateTo("/", false, true);
                    return;
                }

                Obj = CredentialToCredentialEdit(alias);
            }
            else
            {
                // Create new Obj
                var alias = new Credential();
                alias.Alias = new Alias();
                alias.Service = new Service();
                alias.Passwords = new List<Password> { new Password() };

                Obj = CredentialToCredentialEdit(alias);
            }

            // Hide loading spinner
            Loading = false;
            // Force re-render invoke so the charts can be rendered
            StateHasChanged();
        }
    }

    private void HandleAttachmentsChanged(List<Attachment> updatedAttachments)
    {
        Obj.Attachments = updatedAttachments;
        StateHasChanged();
    }

    private async Task GenerateRandomIdentity()
    {
        IsIdentityLoading = true;
        StateHasChanged();

        // Generate a random identity using the IIdentityGenerator implementation.
        var identity = await CredentialService.GenerateRandomIdentityAsync();

        // Generate random values for the Identity properties
        Obj.Username = identity.NickName;
        Obj.Alias.FirstName = identity.FirstName;
        Obj.Alias.LastName = identity.LastName;
        Obj.Alias.NickName = identity.NickName;
        Obj.Alias.Gender = identity.Gender == 1 ? "Male" : "Female";
        Obj.AliasBirthDate = identity.BirthDate.ToString("yyyy-MM-dd");
        Obj.Alias.AddressStreet = identity.Address.Street;
        Obj.Alias.AddressCity = identity.Address.City;
        Obj.Alias.AddressState = identity.Address.State;
        Obj.Alias.AddressZipCode = identity.Address.ZipCode;
        Obj.Alias.AddressCountry = identity.Address.Country;
        Obj.Alias.Hobbies = identity.Hobbies[0];
        Obj.Alias.EmailPrefix = identity.EmailPrefix;
        Obj.Alias.PhoneMobile = identity.PhoneMobile;
        Obj.Alias.BankAccountIBAN = identity.BankAccountIBAN;

        // Generate password
        GenerateRandomPassword();

        IsIdentityLoading = false;
        StateHasChanged();
    }

    private void GenerateRandomPassword()
    {
        // Generate a random password using a IPasswordGenerator implementation.
        IPasswordGenerator passwordGenerator = new SpamOkPasswordGenerator();
        Obj.Password.Value = passwordGenerator.GenerateRandomPassword();
    }

    private async Task SaveAlias()
    {
        IsSaving = true;
        StateHasChanged();

        // Sanity check for unittest. Delete later if not needed.
        // Try to parse birthdate as datetime. if it fails, set it to empty.
        if (EditMode)
        {
            if (Id is not null)
            {
                Id = await CredentialService.UpdateEntryAsync(CredentialEditToCredential(Obj));
            }
        }
        else
        {
            Id = await CredentialService.InsertEntryAsync(CredentialEditToCredential(Obj));
        }

        IsSaving = false;
        StateHasChanged();

        if (Id is null || Id == Guid.Empty)
        {
            // Error saving.
            GlobalNotificationService.AddErrorMessage("Error saving credentials. Please try again.", true);
            return;
        }

        // No error, add success message.
        if (EditMode)
        {
            GlobalNotificationService.AddSuccessMessage("Credentials updated successfully.");
        }
        else
        {
            GlobalNotificationService.AddSuccessMessage("Credentials created successfully.");
        }

        NavigationManager.NavigateTo("/credentials/" + Id);
    }

    private CredentialEdit CredentialToCredentialEdit(Credential alias)
    {
        return new CredentialEdit
        {
            Id = alias.Id,
            Notes = alias.Notes ?? string.Empty,
            Username = alias.Username,
            ServiceName = alias.Service.Name ?? string.Empty,
            ServiceUrl = alias.Service.Url,
            ServiceLogo = alias.Service.Logo,
            Password = alias.Passwords.FirstOrDefault() ?? new Password
            {
                Value = string.Empty,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
            },
            Alias = alias.Alias,
            AliasBirthDate = alias.Alias.BirthDate.ToString("yyyy-MM-dd"),
            Attachments = alias.Attachments.ToList(),
            CreateDate = alias.CreatedAt,
            LastUpdate = alias.UpdatedAt
        };
    }

    private Credential CredentialEditToCredential(CredentialEdit alias)
    {
        var credential = new Credential()
        {
            Id = alias.Id,
            Notes = alias.Notes,
            Username = alias.Username,
            Service = new Service
            {
                Name = alias.ServiceName,
                Url = alias.ServiceUrl,
                Logo = alias.ServiceLogo,
            },
            Passwords = new List<Password>
            {
                alias.Password,
            },
            Alias = alias.Alias,
            Attachments = alias.Attachments,
        };

        if (string.IsNullOrWhiteSpace(alias.AliasBirthDate))
        {
            credential.Alias.BirthDate = DateTime.MinValue;
        }
        else
        {
            credential.Alias.BirthDate = DateTime.Parse(alias.AliasBirthDate, new CultureInfo("en-US"));
        }

        return credential;
    }
}
