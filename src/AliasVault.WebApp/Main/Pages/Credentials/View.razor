@page "/credentials/{id:guid}"
@inherits MainBase
@inject CredentialService CredentialService

<LayoutPageTitle>View credentials</LayoutPageTitle>

@if (IsLoading || Alias == null)
{
    <LoadingIndicator />
}
else
{
    <div class="grid grid-cols-2 px-4 pt-6 md:grid-cols-3 lg:gap-4 dark:bg-gray-900">
        <div class="mb-4 col-span-full xl:mb-2">
            <Breadcrumb BreadcrumbItems="BreadcrumbItems"/>

            <div class="flex items-center justify-between">
                <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">View credentials entry</h1>
                <div class="flex">
                <a href="/credentials/@Id/edit" class="mr-3 px-4 py-2 text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:ring-4 focus:ring-primary-300 dark:bg-primary-500 dark:hover:bg-primary-600 dark:focus:ring-primary-800">
                    Edit credentials entry
                </a>
                <a href="/credentials/@Id/delete" class="px-4 py-2 text-white bg-red-600 rounded-lg hover:bg-red-700 focus:ring-4 focus:ring-red-300 dark:bg-red-500 dark:hover:bg-red-600 dark:focus:ring-red-800">
                    Delete credentials entry
                </a>
                </div>
            </div>
        </div>

        <!-- Right Content -->
        <div class="col-span-full lg:col-auto">
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <div class="items-center sm:flex xl:block 2xl:flex sm:space-x-4 xl:space-x-0 2xl:space-x-4">
                    <DisplayFavicon FaviconBytes="@Alias.Service.Logo" />

                    <div>
                        <h3 class="mb-1 text-xl font-bold text-gray-900 dark:text-white">@Alias.Service.Name</h3>
                        @if (Alias.Service.Url is not null && Alias.Service.Url.Length > 0)
                        {
                            <a href="@Alias.Service.Url" target="_blank" class="text-blue-500 dark:text-blue-400">@Alias.Service.Url</a>
                        }
                    </div>
                </div>
            </div>
            <RecentEmails Email="@Alias.Alias.Email" />
            @if (Alias.Notes != null && Alias.Notes.Length > 0)
            {
                <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                    <h3 class="mb-4 text-xl font-semibold dark:text-white">Notes</h3>
                    @Alias.Notes
                </div>
            }

            @if (Alias.Attachments != null && Alias.Attachments.Count > 0)
            {
                <AttachmentViewer Attachments="@Alias.Attachments" />
            }
        </div>
        <div class="col-span-2">
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <h3 class="mb-4 text-xl font-semibold dark:text-white">Login credentials</h3>
                <form action="#">
                    <div class="grid gap-6">
                        <div class="col-span-6 sm:col-span-3">
                            <CopyPasteFormRow Label="Email" Value="@Alias.Alias.Email"></CopyPasteFormRow>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <CopyPasteFormRow Label="Username" Value="@(Alias.Username)"></CopyPasteFormRow>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <CopyPasteFormRow Label="Password" Value="@(Alias.Passwords.FirstOrDefault()?.Value ?? string.Empty)"></CopyPasteFormRow>
                        </div>
                    </div>
                </form>
            </div>
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <h3 class="mb-4 text-xl font-semibold dark:text-white">Name</h3>
                <form action="#">
                    <div class="grid grid-cols-6 gap-6">
                        <div class="col-span-6 sm:col-span-3">
                            <CopyPasteFormRow Label="Initials" Value="@(Alias.Alias.FirstName?.Substring(0,1))"></CopyPasteFormRow>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <CopyPasteFormRow Label="First name" Value="@(Alias.Alias.FirstName)"></CopyPasteFormRow>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <CopyPasteFormRow Label="Last name" Value="@(Alias.Alias.LastName)"></CopyPasteFormRow>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <CopyPasteFormRow Label="Birthdate" Value="@(Alias.Alias.BirthDate.ToString("yyyy-MM-dd"))"></CopyPasteFormRow>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <CopyPasteFormRow Label="Nickname" Value="@(Alias.Alias.NickName)"></CopyPasteFormRow>
                        </div>
                    </div>
                </form>
            </div>

            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <h3 class="mb-4 text-xl font-semibold dark:text-white">Contact</h3>
                <form action="#">
                    <div class="grid grid-cols-6 gap-6">
                        <div class="col-span-6 sm:col-span-3">
                            <CopyPasteFormRow Label="Phone" Value="@(Alias.Alias.PhoneMobile)"></CopyPasteFormRow>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <CopyPasteFormRow Label="IBAN" Value="@(Alias.Alias.BankAccountIBAN)"></CopyPasteFormRow>
                        </div>
                    </div>
                </form>
            </div>

            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <h3 class="mb-4 text-xl font-semibold dark:text-white">Address</h3>
                <form action="#">
                    <div class="grid grid-cols-6 gap-6">
                        <div class="col-span-6 sm:col-span-3">
                            <CopyPasteFormRow Label="Street" Value="@(Alias.Alias.AddressStreet)"></CopyPasteFormRow>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <CopyPasteFormRow Label="Postal code" Value="@(Alias.Alias.AddressZipCode)"></CopyPasteFormRow>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <CopyPasteFormRow Label="City" Value="@(Alias.Alias.AddressCity)"></CopyPasteFormRow>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <CopyPasteFormRow Label="Country" Value="@(Alias.Alias.AddressCountry)"></CopyPasteFormRow>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@code {
    /// <summary>
    /// Gets or sets the credentials ID.
    /// </summary>
    [Parameter]
    public Guid Id { get; set; }
    private bool IsLoading { get; set; } = true;
    private Credential? Alias { get; set; } = new();

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = "View credentials entry" });
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await LoadEntryAsync();
        }
    }

    private async Task LoadEntryAsync()
    {
        IsLoading = true;
        StateHasChanged();

        // Load the aliases from the webapi via AliasService.
        Alias = await CredentialService.LoadEntryAsync(Id);

        if (Alias is null)
        {
            // Error loading alias.
            GlobalNotificationService.AddErrorMessage("This credentials entry does not exist (anymore). Please try again.");
            NavigationManager.NavigateTo("/", false, true);
            return;
        }

        IsLoading = false;
        StateHasChanged();
    }
}
