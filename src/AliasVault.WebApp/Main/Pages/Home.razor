@page "/"
@page "/credentials"
@inherits MainBase
@inject CredentialService CredentialService

<LayoutPageTitle>Home</LayoutPageTitle>

<div class="grid grid-cols-1 px-4 pt-6 xl:grid-cols-3 xl:gap-4 dark:bg-gray-900">
    <div class="mb-4 col-span-full xl:mb-2">
        <Breadcrumb BreadcrumbItems="BreadcrumbItems" />
        <div class="flex items-center justify-between">
            <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">Credentials</h1>
            <a href="/add-credentials" class="px-4 py-2 text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:ring-4 focus:ring-primary-300 dark:bg-primary-500 dark:hover:bg-primary-600 dark:focus:ring-primary-800">
                + Add new credentials
            </a>
        </div>
        <p>Find all of your credentials below.</p>
    </div>
</div>

@if (IsLoading)
{
    <LoadingIndicator />
}

<div class="grid gap-4 px-4 mb-4 md:grid-cols-4 xl:grid-cols-6">
    @foreach (var credential in Credentials)
    {
        <CredentialCard Obj="@credential"/>
    }
</div>


@code {
    private bool IsLoading { get; set; } = true;
    private List<CredentialListEntry> Credentials { get; set; } = new();

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await LoadCredentialsAsync();
        }
    }

    private async Task LoadCredentialsAsync()
    {
        IsLoading = true;
        StateHasChanged();

        // Load the aliases from the webapi via AliasService.
        var credentialListEntries = await CredentialService.GetListAsync();
        if (credentialListEntries is null)
        {
            // Error loading aliases.
            GlobalNotificationService.AddErrorMessage("Failed to load credentials.", true);
            return;
        }

        Credentials = credentialListEntries;
        IsLoading = false;
        StateHasChanged();
    }
}
