@page "/settings/vault"
@inherits PageBase
@inject HttpClient HttpClient
@inject CredentialService CredentialService

<LayoutPageTitle>Vault settings</LayoutPageTitle>

<div class="grid grid-cols-1 px-4 pt-6 xl:grid-cols-3 xl:gap-4 dark:bg-gray-900">
    <div class="mb-4 col-span-full xl:mb-2">
        <Breadcrumb BreadcrumbItems="BreadcrumbItems" />
        <div class="flex items-center justify-between">
            <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">Vault settings</h1>
        </div>
        <p>On this page you can configure your vault settings.</p>
    </div>
</div>

<div>
    <button @onclick="ExportVaultSqlite" type="button" class="px-4 py-2 text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:ring-4 focus:ring-primary-300 dark:bg-primary-500 dark:hover:bg-primary-600 dark:focus:ring-primary-800">
        Export vault to unencrypted SQLite file
    </button>
</div>
<div class="mt-2">
    <button @onclick="ExportVaultCsv" type="button" class="px-4 py-2 text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:ring-4 focus:ring-primary-300 dark:bg-primary-500 dark:hover:bg-primary-600 dark:focus:ring-primary-800">
        Export vault to unencrypted CSV file
    </button>
</div>

<div class="mt-2">
    Import unencrypted CSV file:
    <InputFile OnChange="@LoadFiles" />
</div>

@if (IsImporting)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(ImportErrorMessage))
{
    <p class="text-danger">@ImportErrorMessage</p>
}
else if (!string.IsNullOrEmpty(ImportSuccessMessage))
{
    <p class="text-success">@ImportSuccessMessage</p>
}

@code {
    private bool IsLoading { get; set; } = true;
    private bool IsImporting = false;
    private string ImportErrorMessage = string.Empty;
    private string ImportSuccessMessage = string.Empty;

    private async Task ExportVaultSqlite()
    {
        try
        {
            // Decode the base64 string to a byte array
            byte[] fileBytes = Convert.FromBase64String(await DbService.ExportSqliteToBase64Async());

            // Create a memory stream from the byte array
            using (MemoryStream memoryStream = new MemoryStream(fileBytes))
            {
                // Invoke JavaScript to initiate the download
                await Js.InvokeVoidAsync("downloadFileFromStream", "aliasvault-client.sqlite", memoryStream.ToArray());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading file: {ex.Message}");
        }
    }

    private async Task ExportVaultCsv()
    {
        try
        {
            var credentials = await CredentialService.LoadAllAsync();

            var csvBytes = CsvImportExport.CredentialCsvService.ExportCredentialsToCsv(credentials);

            // Create a memory stream from the byte array
            using (MemoryStream memoryStream = new MemoryStream(csvBytes))
            {
                // Invoke JavaScript to initiate the download
                await Js.InvokeVoidAsync("downloadFileFromStream", "aliasvault-client.csv", memoryStream.ToArray());
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading file: {ex.Message}");
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IsImporting = true;
        StateHasChanged();
        ImportErrorMessage = string.Empty;
        ImportSuccessMessage = string.Empty;

        try
        {
            var file = e.File;
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            var fileContent = System.Text.Encoding.UTF8.GetString(buffer);

            var importedCredentials = CsvImportExport.CredentialCsvService.ImportCredentialsFromCsv(fileContent);

            // Loop through the imported credentials and actually add them to the database
            foreach (var importedCredential in importedCredentials)
            {
                await CredentialService.InsertEntryAsync(importedCredential, false);
            }

            // Save the database.
            await DbService.SaveDatabaseAsync();

            ImportSuccessMessage = $"Succesfully imported {importedCredentials.Count} credentials.";
        }
        catch (Exception ex)
        {
            ImportErrorMessage = $"Error importing file: {ex.Message}";
        }
        finally
        {
            IsImporting = false;
            StateHasChanged();
        }
    }
}
