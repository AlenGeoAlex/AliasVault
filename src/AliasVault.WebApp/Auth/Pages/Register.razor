@page "/user/register"
@attribute [AllowAnonymous]
@layout Auth.Layout.MainLayout
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@using System.Text.Json
@using AliasVault.Shared.Models
@using AliasVault.WebApp.Auth.Components
@using AliasVault.WebApp.Auth.Services

<h2 class="text-2xl font-bold text-gray-900 dark:text-white">
    Create a Free Account
</h2>

<EditForm Model="user" OnSubmit="HandleRegister" class="mt-8 space-y-6">
    <div>
        <label asp-for="Input.Email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Your email</label>
        <InputTextField id="email" @bind-Value="user.Email" placeholder="name@company.com" />
    </div>
    <div>
        <label asp-for="Input.Password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Your password</label>
        <InputTextField id="password" @bind-Value="user.Password" type="password" placeholder="••••••••" />
    </div>
    <div>
        <label asp-for="Input.Password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Confirm password</label>
        <InputTextField id="password2" @bind-Value="user.PasswordConfirm" type="password" placeholder="••••••••" />
    </div>

    <div class="flex items-start">
        <div class="flex items-center h-5">
            <input id="terms" aria-describedby="terms" name="terms" type="checkbox" class="w-4 h-4 border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-primary-300 dark:focus:ring-primary-600 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600" required>
        </div>
        <div class="ml-3 text-sm">
            <label for="terms" class="font-medium text-gray-900 dark:text-white">I accept the <a href="#" class="text-primary-700 hover:underline dark:text-primary-500">Terms and Conditions</a></label>
        </div>
    </div>

    <button type="submit" class="w-full px-5 py-3 text-base font-medium text-center text-white bg-primary-700 rounded-lg hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 sm:w-auto dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">Create account</button>
    <div class="text-sm font-medium text-gray-500 dark:text-gray-400">
        Already registered? <a href="/user/login" class="text-primary-700 hover:underline dark:text-primary-500">Login here</a>
    </div>
</EditForm>

@if (validationErrors.Any())
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in validationErrors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<FullScreenLoadingIndicator @ref="loadingIndicator" />

@code {
    RegisterModel user = new RegisterModel();
    FullScreenLoadingIndicator loadingIndicator = new();
    List<string> validationErrors = new List<string>();

    async Task HandleRegister()
    {
        loadingIndicator.Show();
        validationErrors.Clear();

        try
        {
            var result = await Http.PostAsJsonAsync("api/Auth/register", user);

            if (result.IsSuccessStatusCode)
            {
                var responseContent = await result.Content.ReadAsStringAsync();
                var tokenObject = JsonSerializer.Deserialize<TokenModel>(responseContent);

                if (tokenObject != null)
                {
                    // Store the token as a plain string in local storage
                    await AuthService.StoreAccessTokenAsync(tokenObject.Token);
                    await AuthService.StoreRefreshTokenAsync(tokenObject.RefreshToken);
                    await AuthStateProvider.GetAuthenticationStateAsync();
                }
                else
                {
                    // Handle the case where the token is not present in the response
                    Console.WriteLine("Token not found in the response.");
                }

                NavigationManager.NavigateTo("/");
            }
            else
            {
                var responseContent = await result.Content.ReadAsStringAsync();
                var errorResponse = System.Text.Json.JsonSerializer.Deserialize<ValidationErrorResponse>(responseContent);
                if (errorResponse != null && errorResponse.Errors != null)
                {
                    foreach (var error in errorResponse.Errors.Values)
                    {
                        validationErrors.AddRange(error);
                    }
                }
            }
        }
        finally
        {
            loadingIndicator.Hide();
        }
    }

    public class ValidationErrorResponse
    {
        public string Type { get; set; } = null!;
        public string Title { get; set; } = null!;
        public int Status { get; set; }
        public Dictionary<string, string[]> Errors { get; set; } = new();
        public string TraceId { get; set; } = null!;
    }
}
