@using AliasVault.WebApp.Services.Database
@implements IDisposable
@inject DbService DbService

@if (Loading)
{
    <div class="flex items-center justify-center">
        <SmallLoadingIndicator />
        <p class="ml-2">@Message</p>
    </div>
}

<!--
<p>Message: @DbService.GetState().CurrentState.Message</p>
<p>Last Updated: @DbService.GetState().CurrentState.LastUpdated</p>
-->

@code {
    private bool Loading { get; set; } = false;
    private string Message { get; set; } = "";
    private bool _isSaving => DbService.GetState().CurrentState.Status == DbServiceState.DatabaseStatus.Saving;

    protected override void OnInitialized()
    {
        DbService.GetState().StateChanged += OnDatabaseStateChanged;
    }

    private async void OnDatabaseStateChanged(object? sender, DbServiceState.DatabaseState newState)
    {
        await InvokeAsync(StateHasChanged);
        if (newState.Status == DbServiceState.DatabaseStatus.Saving)
        {
            // Show loading indicator for at least 0.5 seconds even if the save operation is faster.
            Message = "Saving...";
            await ShowLoadingIndicatorAsync();
        }
        else if (newState.Status == DbServiceState.DatabaseStatus.Loading)
        {
            Message = "Loading...";
            await ShowLoadingIndicatorAsync();
        }
    }

    private async Task ShowLoadingIndicatorAsync()
    {
        Loading = true;
        StateHasChanged();
        await Task.Delay(500);
        Loading = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        DbService.GetState().StateChanged -= OnDatabaseStateChanged;
    }
}
