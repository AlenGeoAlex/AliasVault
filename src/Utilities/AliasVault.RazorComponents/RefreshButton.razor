@using System.Timers

<button @onclick="HandleClick"
        disabled="@IsRefreshing"
        class="@GetButtonClasses()">
    <svg class="@GetIconClasses()" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
    </svg>
    <span class="ml-2">@ButtonText</span>
</button>

@code {
    /// <summary>
    /// The event to call in the parent when the button is clicked.
    /// </summary>
    [Parameter] public EventCallback OnRefresh { get; set; }

    /// <summary>
    /// The text to display on the button.
    /// </summary>
    [Parameter] public string ButtonText { get; set; } = "Refresh";

    private bool IsRefreshing;
    private Timer Timer = new();

    private async Task HandleClick()
    {
        if (IsRefreshing) return;

        IsRefreshing = true;
        await OnRefresh.InvokeAsync();

        Timer = new Timer(500);
        Timer.Elapsed += (sender, args) =>
        {
            IsRefreshing = false;
            Timer.Dispose();
            InvokeAsync(StateHasChanged);
        };
        Timer.Start();
    }

    private string GetButtonClasses()
    {
        return $"flex items-center px-3 py-2 text-sm font-medium text-white rounded-lg focus:outline-none focus:ring-4 focus:ring-primary-300 dark:focus:ring-primary-800 {(IsRefreshing ? "bg-gray-400 cursor-not-allowed" : "bg-primary-700 hover:bg-primary-800 dark:bg-primary-600 dark:hover:bg-primary-700")}";
    }

    private string GetIconClasses()
    {
        return $"w-4 h-4 {(IsRefreshing ? "animate-spin" : "")}";
    }
}
